package com.gtracker;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
//TBD: update time
public class Main extends Activity {

	private int selected_upd_index; //0 - is title
	private boolean isTrackerEnabled=false;
	TextView gpsProviderStatus = null;
	TextView networkProviderStatus = null;
	LocationManager locationManager = null;
	LocationListener locationListener = null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		this.selected_upd_index = 0;
		init_freq_upd_spinner();
		final TextView gpsProviderStatus = (TextView) findViewById(R.id.textViewGPSProviderStatus);
		final TextView networkProviderStatus = (TextView) findViewById(R.id.textViewNetworkProviderStatus);
		Log.d("ME", "in onCreate()");
		
		locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
		
		checkGPSStatus(gpsProviderStatus, networkProviderStatus, locationManager);
						 
		locationListener = new LocationListener() {
			
			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				// TODO Auto-generated method stub
				checkGPSStatus(gpsProviderStatus, networkProviderStatus, locationManager);
				Log.d("ME", "GPS status changed");
			}
			
			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub
				TextView coordinates = (TextView) findViewById(R.id.textViewCoordinates);
				coordinates.setText("Trying to locate your device...");
				checkGPSStatus(gpsProviderStatus, networkProviderStatus, locationManager);
				Log.d("ME", "GPS enabled");
			}
			
			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub
				checkGPSStatus(gpsProviderStatus, networkProviderStatus, locationManager);
			}
			
			@Override
			public void onLocationChanged(Location location) {
				// TODO Auto-generated method stub
				if(isTrackerEnabled)
				{
					TextView coordinates = (TextView) findViewById(R.id.textViewCoordinates);
					coordinates.setText(String.format("%f, %f", location.getLatitude(), location.getLongitude()));
				}
				///transmit coordinates
			}
		};
		
		Switch switchLocator = (Switch) findViewById(R.id.switchLocator);
		switchLocator.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				// TODO Auto-generated method stub
				isTrackerEnabled = isChecked;
				if(isTrackerEnabled)
					turnOnLocation(locationListener);
				else turnOffLocation(locationListener);
				Log.d("ME", "tracker is "+isChecked);
			}
		});
		
	}

	private void transmitCoordinates(String lat, String lon)
	{
		
	}
	
	private void turnOnLocation(LocationListener listener)
	{
		locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, listener);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);
	}
	
	private void turnOffLocation(LocationListener listener)
	{
		locationManager.removeUpdates(listener);
	}
	
	private void checkGPSStatus(TextView gpsStatus, TextView networkStatus,
			final LocationManager manager) {
		gpsStatus.setText(""+(manager.isProviderEnabled(LocationManager.GPS_PROVIDER)));
		networkStatus.setText(""+manager.isProviderEnabled(LocationManager.NETWORK_PROVIDER));
	}

	private void init_freq_upd_spinner() {
		Spinner spinner = (Spinner) findViewById(R.id.upd_interval_spinner);
		// Create an ArrayAdapter using the string array and a default spinner layout
		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
		        R.array.upd_interval_array, android.R.layout.simple_spinner_item);
		// Specify the layout to use when the list of choices appears
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		// Apply the adapter to the spinner
		spinner.setAdapter(adapter);
		spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				selected_upd_index = parent.getSelectedItemPosition();
			}
			
			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				selected_upd_index = 0;
			}
		});
	}

}
